import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as e,c as r,d as s,e as a,b as o,f as p}from"./app-Dya65-u5.js";const t={},B={class:"hint-container tip"},c=s("p",{class:"hint-container-title"},"提示",-1),d=s("p",null,[a("已使用 "),s("code",null,"unplugin-auto-import/vite"),a(" 自动导入API。")],-1),k=s("p",null,[a("已使用 "),s("code",null,"vite-plugin-vue-setup-extend"),a(" 自动注入 setup 函数。")],-1),h={href:"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在学习 mvvm 响应式架构前，我们需要理解一下副作用函数的意思</p><div class="hint-container warning"><p class="hint-container-title">副作用函数</p><p>当响应式数据发生改变时需要执行的行为。</p><ul><li>依赖追踪：执行 watchEffect 或 watch 中的监听回调函数</li><li>组件重新渲染，更新用户界面</li><li>计算属性重新计算</li><li>调度更新：异步队列来批量处理更新，以优化性能。这也是我们常常需要使用 nextTick 来执行一些dom操作的原因。</li></ul></div><h2 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法"><span>基础用法</span></a></h2><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref()</span></a></h3><p>接收一个值，返回一个响应式、可更改的 ref 对象。</p><ul><li>在 js 中使用时需添加属性指向 <code>.value</code></li><li>在 模板 中使用时无需添加属性指向 <code>.value</code></li><li>可以被赋值为任意值，并且值都是响应式的</li><li>给 <code>ref()</code> 赋值一个对象时，那么底层会调用 <a href="#reactive">reactive()</a> 转为深层次响应式对象</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> ref</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive()</span></a></h3><p>接收一个对象，对这个对象的所有嵌套的内容进行响应式转换，返回一个响应式代理。</p><ul><li>基础类型不能使用 <code>reactive()</code></li><li>如果只想保留对这个对象的顶层进行响应式转换，那么就需使用 <a href="#shallowreactive">shallowReactive()</a></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reactive</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly"><span>readonly()</span></a></h3><p>接受一个对象 (不论是响应式还是普通的) 或是一个 <a href="#ref">ref()</a> 对象，返回一个原值的只读代理。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> readonly</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 更改该只读副本将会失败，并会得到一个警告</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  copy</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;"> // warning!</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶用法" tabindex="-1"><a class="header-anchor" href="#进阶用法"><span>进阶用法</span></a></h2><h3 id="shallowref" tabindex="-1"><a class="header-anchor" href="#shallowref"><span>shallowRef()</span></a></h3><p>和 <a href="#ref">ref()</a> 不同，这个不会把对象深层递归转为响应式。只有对 <code>.value</code> 的访问是响应式的。</p><p>常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> shallowRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 不会触发页面更改</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 会触发页面更改</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="triggerref" tabindex="-1"><a class="header-anchor" href="#triggerref"><span>triggerRef()</span></a></h3><p>强制触发一个 <code>shallowRef()</code> 的 <a href="#%E5%89%8D%E8%A8%80">副作用</a>，这通常在对 <code>shallowRef()</code> 的内部值进行变更后使用。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;{{</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}}&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">h1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> obj</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> shallowRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 不会触发页面更改</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">  obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">value</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">count</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">  // 出发页面更改</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  triggerRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">obj</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customref" tabindex="-1"><a class="header-anchor" href="#customref"><span>customRef()</span></a></h3><p>创建一个自定义的 <code>ref</code> 对应，自定义控制其依赖追踪和更新触发。</p><p>常用在 <code>频繁输入、更改、防抖</code> 等场景</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  &lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">input</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> v-model</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">=</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&quot;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">text</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">template</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> setup</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">  const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> text</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> customRef</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">((</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">track</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">trigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> timeout</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> delay</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#D19A66;--shiki-dark:#D19A66;"> 1000</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">      get</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        track</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 收到更新通知，触发副作用函数</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">        return</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">      set</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;font-style:italic;--shiki-dark-font-style:italic;">newValue</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">        clearTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">timeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">        timeout</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(() </span><span style="color:#C678DD;--shiki-dark:#C678DD;">=&gt;</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">          value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> newValue</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">          trigger</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() </span><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 通知更新</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">        }, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">delay</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shallowreactive" tabindex="-1"><a class="header-anchor" href="#shallowreactive"><span>shallowReactive()</span></a></h3><p>和 <a href="#reactive">reactive()</a> 不同，这个不会把对象深层递归转为响应式。只转换顶级属性。</p><h3 id="toraw" tabindex="-1"><a class="header-anchor" href="#toraw"><span>toRaw()</span></a></h3><p><code>toRaw()</code> 可以返回由 <code>reactive()、readonly()、shallowReactive()、shallowReadonly()</code> 创建的代理对应的原始对象。 不建议持久使用，用完建议回收。</p><h3 id="markraw" tabindex="-1"><a class="header-anchor" href="#markraw"><span>markRaw()</span></a></h3><h3 id="effectscope" tabindex="-1"><a class="header-anchor" href="#effectscope"><span>effectScope()</span></a></h3><h3 id="getcurrentscope" tabindex="-1"><a class="header-anchor" href="#getcurrentscope"><span>getCurrentScope()</span></a></h3><h3 id="onscopedispose" tabindex="-1"><a class="header-anchor" href="#onscopedispose"><span>onScopeDispose()</span></a></h3><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h2><h3 id="isref" tabindex="-1"><a class="header-anchor" href="#isref"><span>isRef()</span></a></h3><p>检查某个值是否为 <code>ref</code>。</p><h3 id="unref" tabindex="-1"><a class="header-anchor" href="#unref"><span>unref()</span></a></h3><p>如果参数是 <code>ref</code>，则返回内部值，否则返回参数本身。</p><p>这是 val = isRef(val) ? val.value : val 计算的一个语法糖。</p><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref"><span>toRef()</span></a></h3><p>解构响应式对象为 <code>ref</code> 对象。</p><h3 id="tovalue" tabindex="-1"><a class="header-anchor" href="#tovalue"><span>toValue()</span></a></h3><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs"><span>toRefs()</span></a></h3><p>底层为调用 <a href="#toref">toRef()</a>，所以功能是一样的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> state</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> reactive</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  foo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">1</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">  bar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#D19A66;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">// 可以解构而不会失去响应性</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">const</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> { </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">foo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E5C07B;--shiki-dark:#E5C07B;">bar</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> } </span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">state</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">foo</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">value</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#98C379;--shiki-dark:#98C379;"> &#39;foo&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isproxy" tabindex="-1"><a class="header-anchor" href="#isproxy"><span>isProxy()</span></a></h3><p>检查一个对象是否是由 <code>reactive()、readonly()、shallowReactive()、shallowReadonly()</code> 创建的代理。</p><h3 id="isreactive" tabindex="-1"><a class="header-anchor" href="#isreactive"><span>isReactive()</span></a></h3><p>检查一个对象是否是由 <code>reactive()、shallowReactive()</code> 创建的代理。</p><h3 id="isreadonly" tabindex="-1"><a class="header-anchor" href="#isreadonly"><span>isReadonly()</span></a></h3><p>检查传入的值是否为只读对象。</p>`,53);function A(F,v){const n=l("ExternalLinkIcon");return e(),r("div",null,[s("div",B,[c,d,k,s("p",null,[a("如果未使用插件，使用方法请参考官方文档 "),s("a",h,[a("vue3 响应式基础"),o(n)])])]),y])}const E=i(t,[["render",A],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/code/vue/","title":"响应式基础","lang":"zh-CN","frontmatter":{"title":"响应式基础","order":1,"description":"提示 已使用 unplugin-auto-import/vite 自动导入API。 已使用 vite-plugin-vue-setup-extend 自动注入 setup 函数。 如果未使用插件，使用方法请参考官方文档 vue3 响应式基础 前言 在学习 mvvm 响应式架构前，我们需要理解一下副作用函数的意思 副作用函数 当响应式数据发生改变时需要执...","head":[["meta",{"property":"og:url","content":"http://localhost:8080/code/vue/"}],["meta",{"property":"og:site_name","content":"Azil"}],["meta",{"property":"og:title","content":"响应式基础"}],["meta",{"property":"og:description","content":"提示 已使用 unplugin-auto-import/vite 自动导入API。 已使用 vite-plugin-vue-setup-extend 自动注入 setup 函数。 如果未使用插件，使用方法请参考官方文档 vue3 响应式基础 前言 在学习 mvvm 响应式架构前，我们需要理解一下副作用函数的意思 副作用函数 当响应式数据发生改变时需要执..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-07T09:38:47.000Z"}],["meta",{"property":"article:author","content":"Azil"}],["meta",{"property":"article:modified_time","content":"2024-05-07T09:38:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-07T09:38:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Azil\\",\\"url\\":\\"https://gitee.com/codedi\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"基础用法","slug":"基础用法","link":"#基础用法","children":[{"level":3,"title":"ref()","slug":"ref","link":"#ref","children":[]},{"level":3,"title":"reactive()","slug":"reactive","link":"#reactive","children":[]},{"level":3,"title":"readonly()","slug":"readonly","link":"#readonly","children":[]}]},{"level":2,"title":"进阶用法","slug":"进阶用法","link":"#进阶用法","children":[{"level":3,"title":"shallowRef()","slug":"shallowref","link":"#shallowref","children":[]},{"level":3,"title":"triggerRef()","slug":"triggerref","link":"#triggerref","children":[]},{"level":3,"title":"customRef()","slug":"customref","link":"#customref","children":[]},{"level":3,"title":"shallowReactive()","slug":"shallowreactive","link":"#shallowreactive","children":[]},{"level":3,"title":"toRaw()","slug":"toraw","link":"#toraw","children":[]},{"level":3,"title":"markRaw()","slug":"markraw","link":"#markraw","children":[]},{"level":3,"title":"effectScope()","slug":"effectscope","link":"#effectscope","children":[]},{"level":3,"title":"getCurrentScope()","slug":"getcurrentscope","link":"#getcurrentscope","children":[]},{"level":3,"title":"onScopeDispose()","slug":"onscopedispose","link":"#onscopedispose","children":[]}]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[{"level":3,"title":"isRef()","slug":"isref","link":"#isref","children":[]},{"level":3,"title":"unref()","slug":"unref","link":"#unref","children":[]},{"level":3,"title":"toRef()","slug":"toref","link":"#toref","children":[]},{"level":3,"title":"toValue()","slug":"tovalue","link":"#tovalue","children":[]},{"level":3,"title":"toRefs()","slug":"torefs","link":"#torefs","children":[]},{"level":3,"title":"isProxy()","slug":"isproxy","link":"#isproxy","children":[]},{"level":3,"title":"isReactive()","slug":"isreactive","link":"#isreactive","children":[]},{"level":3,"title":"isReadonly()","slug":"isreadonly","link":"#isreadonly","children":[]}]}],"git":{"createdTime":1714039804000,"updatedTime":1715074727000,"contributors":[{"name":"Azil","email":"13701378834@163.com","commits":2}]},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"code/vue/index.md","localizedDate":"2024年4月25日","autoDesc":true,"excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>已使用 <code>unplugin-auto-import/vite</code> 自动导入API。</p>\\n<p>已使用 <code>vite-plugin-vue-setup-extend</code> 自动注入 setup 函数。</p>\\n<p>如果未使用插件，使用方法请参考官方文档 <a href=\\"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">vue3 响应式基础</a></p>\\n</div>"}');export{E as comp,b as data};
