import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as o,b as r,d as s,e as a,f as t}from"./app-Dya65-u5.js";const p={},B=s("h2",{id:"冻结数据",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#冻结数据"},[s("span",null,"冻结数据")])],-1),c=s("p",null,[s("code",null,"vue2"),a(" 中渲染大数据量时通常会出现卡顿，问题在于 vue 拿到数据后需要深度遍历后通过 "),s("code",null,"proxySetter"),a(" 进行响应式绑定。 而实际渲染到页面的消耗时间通常不会太久"),s("strong",null,"除非dom节点确定过多，那么就需要到滚动虚拟加载了"),a("。 这时我们可以通过冻结对象告诉 vue 不要把我们的数据变成响应式。")],-1),d=s("p",null,[a("需要使用到 js 的 "),s("code",null,"Object.freeze"),a(" 函数")],-1),k=t(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="shiki shiki-themes one-dark-pro one-dark-pro" style="background-color:#282c34;--shiki-dark-bg:#282c34;color:#abb2bf;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">export</span><span style="color:#C678DD;--shiki-dark:#C678DD;"> default</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  data</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    return</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;--shiki-dark:#E06C75;">      list</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: []</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;--shiki-dark:#61AFEF;">  create</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    const</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> result</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;--shiki-dark:#7F848E;font-style:italic;--shiki-dark-font-style:italic;">    // 渲染一百万次</span></span>
<span class="line"><span style="color:#C678DD;--shiki-dark:#C678DD;">    for</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="color:#C678DD;--shiki-dark:#C678DD;">let</span><span style="color:#E06C75;--shiki-dark:#E06C75;"> i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="color:#D19A66;--shiki-dark:#D19A66;">0</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D19A66;--shiki-dark:#D19A66;">100e4</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">; </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;">++</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">      result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">push</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">({ </span><span style="color:#E06C75;--shiki-dark:#E06C75;">id</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="color:#E06C75;--shiki-dark:#E06C75;">name</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="color:#98C379;--shiki-dark:#98C379;">\`name-</span><span style="color:#C678DD;--shiki-dark:#C678DD;">\${</span><span style="color:#E06C75;--shiki-dark:#E06C75;">i</span><span style="color:#C678DD;--shiki-dark:#C678DD;">}</span><span style="color:#98C379;--shiki-dark:#98C379;">\`</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;--shiki-dark:#E5C07B;">    this</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#E06C75;--shiki-dark:#E06C75;">list</span><span style="color:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="color:#E5C07B;--shiki-dark:#E5C07B;"> Object</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="color:#61AFEF;--shiki-dark:#61AFEF;">freeze</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="color:#E06C75;--shiki-dark:#E06C75;">result</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#E06C75;--shiki-dark:#E06C75;">script</span><span style="color:#ABB2BF;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 <code>vue3</code> 中就简单很多，可使用以下方法</strong></p><ul><li>shallowRef</li><li>shallowReactive</li></ul>`,3);function h(y,A){const e=i("Badge");return l(),o("div",null,[B,c,d,r(e,{text:"注意此时数据变为了只可读状态",type:"danger"}),k])}const C=n(p,[["render",h],["__file","性能优化.html.vue"]]),m=JSON.parse('{"path":"/code/vue/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"性能优化","lang":"zh-CN","frontmatter":{"title":"性能优化","order":2,"description":"冻结数据 vue2 中渲染大数据量时通常会出现卡顿，问题在于 vue 拿到数据后需要深度遍历后通过 proxySetter 进行响应式绑定。 而实际渲染到页面的消耗时间通常不会太久除非dom节点确定过多，那么就需要到滚动虚拟加载了。 这时我们可以通过冻结对象告诉 vue 不要把我们的数据变成响应式。 需要使用到 js 的 Object.freeze 函数","head":[["meta",{"property":"og:url","content":"http://localhost:8080/code/vue/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Azil"}],["meta",{"property":"og:title","content":"性能优化"}],["meta",{"property":"og:description","content":"冻结数据 vue2 中渲染大数据量时通常会出现卡顿，问题在于 vue 拿到数据后需要深度遍历后通过 proxySetter 进行响应式绑定。 而实际渲染到页面的消耗时间通常不会太久除非dom节点确定过多，那么就需要到滚动虚拟加载了。 这时我们可以通过冻结对象告诉 vue 不要把我们的数据变成响应式。 需要使用到 js 的 Object.freeze 函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-07T09:38:47.000Z"}],["meta",{"property":"article:author","content":"Azil"}],["meta",{"property":"article:modified_time","content":"2024-05-07T09:38:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-07T09:38:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Azil\\",\\"url\\":\\"https://gitee.com/codedi\\"}]}"]]},"headers":[{"level":2,"title":"冻结数据","slug":"冻结数据","link":"#冻结数据","children":[]}],"git":{"createdTime":1715074727000,"updatedTime":1715074727000,"contributors":[{"name":"Azil","email":"13701378834@163.com","commits":1}]},"readingTime":{"minutes":0.68,"words":203},"filePathRelative":"code/vue/性能优化.md","localizedDate":"2024年5月7日","autoDesc":true,"excerpt":"<h2>冻结数据</h2>\\n<p><code>vue2</code> 中渲染大数据量时通常会出现卡顿，问题在于 vue 拿到数据后需要深度遍历后通过 <code>proxySetter</code> 进行响应式绑定。\\n而实际渲染到页面的消耗时间通常不会太久<strong>除非dom节点确定过多，那么就需要到滚动虚拟加载了</strong>。\\n这时我们可以通过冻结对象告诉 vue 不要把我们的数据变成响应式。</p>\\n<p>需要使用到 js 的 <code>Object.freeze</code> 函数</p>\\n"}');export{C as comp,m as data};
